//=============================================================================
//
// ファイル処理 [file.cpp]
// Author : 
//
//=============================================================================

/******************************************************************************
* インクルードファイル
*******************************************************************************/
#include "file.h"
#include "score.h"
#include "UI.h"

/*******************************************************************************
* マクロ定義
*******************************************************************************/



/*******************************************************************************
* 構造体定義
*******************************************************************************/



/*******************************************************************************
* プロトタイプ宣言
*******************************************************************************/



/*******************************************************************************
マクロ定義
*******************************************************************************/



/*******************************************************************************
* グローバル変数
*******************************************************************************/
SAVEDATA	save;		// セーブデータ作成場所


/*******************************************************************************
関数名:	void SaveData( void )
引数:	void
戻り値:	void
説明:	セーブデータを作成し、ファイルへ出力する
*******************************************************************************/
void SaveData(int saveSlotNum)
{
	if (saveSlotNum == -1)
		return;

	{	// プレイヤーデータをセーブする
		PlayerData *playerData = GetPlayerData();

		// プレイヤーの人数分セーブする
		save.playerData = *playerData;
	}

	// スコアデータをセーブする
	save.score = GetScore();


	// セーブデータのチェックサムを求める
	{
		char *adr = (char *)&save;	// デーブデータの先頭アドレスをadrに入れる
		int  sum = 0;				// 計算するチェックサム

		save.sum = 0;				// セーブデータ側のチェックサムを０でクリアしていく

		for (int i = 0; i < sizeof(SAVEDATA); i++)
		{
			sum += adr[i];
		}

		save.sum = sum;
	}



	// SAVEDATA構造体ごと全部をファイルに出力する
	FILE *fp;
	
	printf("\nセーブ開始・・・");
	char filename[20];
	sprintf_s(filename, sizeof(filename), "savedata%02d.bin", saveSlotNum);
	fopen_s(&fp, filename, "wb");		// ファイルをバイナリ書き込みモードでOpenする

	if (fp != NULL)								// ファイルがあれば書き込み、無ければ無視
	{	
		fwrite(&save, 1, sizeof(SAVEDATA), fp);	// 指定したアドレスから指定したバイト数分ファイルへ書き込む
		fclose(fp);								// Openしていたファイルを閉じる
		printf("終了！\n");
	}

}


/*******************************************************************************
関数名:	void LoadData( void )
引数:	void
戻り値:	void
説明:	セーブデータをファイルから読み込む
*******************************************************************************/
BOOL LoadData(int saveSlotNum, PlayerData* playerData)
{
	if (saveSlotNum == -1)
		return FALSE;

	// ファイルからセーブデータを読み込む
	FILE* fp;

	printf("\nロード開始・・・");
	char filename[20];
	sprintf_s(filename, sizeof(filename), "savedata%02d.bin", saveSlotNum);
	fopen_s(&fp, filename, "rb");	// ファイルをバイナリ読み込みモードでOpenする

	if (fp != NULL)						// ファイルがあれば書き込み、無ければ無視
	{
		fread(&save, 1, sizeof(SAVEDATA), fp);	// 指定したアドレスへ指定したバイト数分ファイルから読み込む
		fclose(fp);								// Openしていたファイルを閉じる
		printf("終了！\n");
	}
	else
	{
		return FALSE;
	}


	// セーブデータのチェックサムが合っているか調べる
	{
		char *adr = (char *)&save;	// デーブデータの先頭アドレスをadrに入れる
		int  sum = 0;				// 計算するチェックサム
		int  org = save.sum;		// セーブデータ内のチェックサム

		save.sum = 0;				// セーブデータ側のチェックサムを０でクリアしていく

		for (int i = 0; i < sizeof(SAVEDATA); i++)
		{
			sum += adr[i];
		}

		// 元々のチェックサムと再計算したチェックサムが同じか調べている
		if (sum != org)
		{
			// データが改ざんされている！
			return FALSE;
		}
	}



	// プレイヤーの人数分、playerワークへ戻す
	{	// プレイヤーデータをロードする
		if (playerData == nullptr)
			playerData = GetPlayerData();

		// プレイヤーの人数分ロードする
		*playerData = save.playerData;
	}

	// スコアデータをロードする
	SetScore(save.score);

	SetPlayerInitPos(playerData->initPos.x, playerData->initPos.y);

	return TRUE;
}



